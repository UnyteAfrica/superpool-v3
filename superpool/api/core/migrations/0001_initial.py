# Generated by Django 5.0.6 on 2024-06-29 20:56

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("merchants", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("street", models.CharField(max_length=100)),
                ("city", models.CharField(max_length=100)),
                ("state", models.CharField(max_length=100)),
                ("country", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_trashed", models.BooleanField(default=False)),
                ("trashed_at", models.DateTimeField(blank=True, null=True)),
                ("restored_at", models.DateTimeField(blank=True, null=True)),
                (
                    "policy_id",
                    models.BigAutoField(
                        help_text="Unique identifier for the package",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "product_name",
                    models.CharField(
                        help_text="Name of the package offered by the insurance provider",
                        max_length=100,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Description of the package"),
                ),
                (
                    "product_type",
                    models.CharField(
                        choices=[
                            ("Life", "Life Insurance"),
                            ("Health", "Health Insurance"),
                            ("Auto", "Auto Insurance"),
                            ("Gadget", "Gadget Insurance"),
                            ("Travel", "Travel Insurance"),
                        ],
                        help_text="Type of insurance package",
                        max_length=15,
                    ),
                ),
                (
                    "coverage_details",
                    models.TextField(help_text="Detailed breakdown of what's covered"),
                ),
                (
                    "base_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Base price of the package prior to any modifications or adjustments",
                        max_digits=10,
                    ),
                ),
            ],
            options={
                "verbose_name": "Product",
                "verbose_name_plural": "Products",
                "db_table": "products",
            },
        ),
        migrations.CreateModel(
            name="Provider",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the provider",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the Insurance Provider. This could be a short form of the company name",
                        max_length=80,
                        unique=True,
                    ),
                ),
                (
                    "short_code",
                    models.CharField(
                        help_text="This is used in the system to identify the provider. It should be unique, example includes: AXA-XXXX, HEIR-XXXX, UNYT-XXXX, LEAD-XXXX, etc.",
                        max_length=10,
                        unique=True,
                    ),
                ),
                (
                    "tax_identification_number",
                    models.CharField(
                        blank=True, max_length=40, null=True, verbose_name="TIN"
                    ),
                ),
                (
                    "support_email",
                    models.EmailField(
                        blank=True,
                        help_text="Email address is used to track their support team during integrations",
                        max_length=254,
                        null=True,
                        verbose_name="Business email",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Providers",
            },
        ),
        migrations.CreateModel(
            name="Application",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("application_id", models.CharField(max_length=100, unique=True)),
                ("api_token", models.CharField(max_length=80, unique=True)),
                (
                    "test_mode",
                    models.BooleanField(
                        help_text="Whether the application is in test mode"
                    ),
                ),
                (
                    "merchant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="merchants.merchant",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Customer",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        help_text="Given name as it appears on ID",
                        max_length=40,
                        verbose_name="First Name",
                    ),
                ),
                (
                    "middle_name",
                    models.CharField(
                        blank=True,
                        help_text="Middle name as it appears on User's ID ",
                        max_length=40,
                        null=True,
                        verbose_name="middle name",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        help_text="Family name as it appears on ID",
                        max_length=40,
                        verbose_name="Last Name",
                    ),
                ),
                (
                    "email",
                    models.EmailField(help_text="Email", max_length=254, unique=True),
                ),
                (
                    "address",
                    models.TextField(
                        help_text="Physical address of the customer",
                        verbose_name="Address",
                    ),
                ),
                (
                    "kyc_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Designates if the customer has completed KYC",
                    ),
                ),
                (
                    "dob",
                    models.DateField(
                        help_text="Date of birth of the customer",
                        verbose_name="Date of Birth",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        help_text="Phone number of the customer",
                        max_length=20,
                        verbose_name="Phone Number",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        help_text="Gender of the customer, identified as: M for Male, F for Female",
                        max_length=1,
                        verbose_name="Gender",
                    ),
                ),
                (
                    "verification_type",
                    models.CharField(
                        help_text="Type of verification document",
                        max_length=20,
                        verbose_name="Verification Type",
                    ),
                ),
                (
                    "verification_id",
                    models.CharField(
                        help_text="ID of the verification document",
                        max_length=20,
                        verbose_name="Verification ID",
                    ),
                ),
            ],
            options={
                "ordering": ["first_name", "last_name"],
                "indexes": [
                    models.Index(
                        fields=["first_name", "last_name", "email"],
                        name="core_custom_first_n_3f986d_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Coverage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "coverage_name",
                    models.CharField(
                        help_text="Name of the coverage e.g collision, hospitalization, etc.",
                        max_length=100,
                        verbose_name="Coverage Name",
                    ),
                ),
                (
                    "coverage_id",
                    models.CharField(
                        help_text="unique identifier to track coverage details",
                        max_length=100,
                        verbose_name="Coverage ID",
                    ),
                ),
                (
                    "coverage_limit",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="This is the maximum amount that the insurance company will pay for a claim",
                        max_digits=10,
                        verbose_name="Coverage Limit",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Description of the coverage",
                        verbose_name="Description",
                    ),
                ),
                (
                    "product_id",
                    models.ForeignKey(
                        help_text="Product to which the coverage belongs",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="coverages",
                        to="core.product",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="product",
            name="provider",
            field=models.ForeignKey(
                help_text="Insurance provider offering the package",
                on_delete=django.db.models.deletion.CASCADE,
                to="core.provider",
            ),
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="ID of the user",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        help_text="Given name as it appears on ID",
                        max_length=40,
                        verbose_name="First Name",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        help_text="Family name as it appears on ID",
                        max_length=40,
                        verbose_name="Last Name",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        blank=True,
                        help_text="Designates the username of a given user",
                        unique=True,
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[("admin", "Admin"), ("support", "Customer Support")],
                        default="admin",
                        help_text="Designates the role of a given user on the platform",
                        max_length=20,
                        verbose_name="Role",
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "ordering": ["first_name", "last_name", "last_login", "date_joined"],
                "indexes": [
                    models.Index(
                        fields=["first_name", "last_name"],
                        name="core_user_first_n_7ed624_idx",
                    )
                ],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
