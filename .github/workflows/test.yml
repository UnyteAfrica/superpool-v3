name: CI Pipeline - Run tests with Codecov

on:
  pull_request:
    branches:
      - dev
permissions:
  packages: write
  contents: read

env:
  FORCE_COLOR: 3
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry/
          key: ${{ runner.os }}-poetry-${{ hashFiles('superpool/api/poetry.lock')}}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install poetry
        run: curl -sSL https://install.python-poetry.org | python3 -

      - name: Install dependencies
        run: |
          cd superpool/api
          poetry install

      - name: Run test
        env:
          # Superpool related keys
          SUPERPOOL_ALLOWED_HOSTS: ${{ secrets.SUPERPOOL_ALLOWED_HOSTS }}
          SUPERPOOL_ENABLE_TEST_MODE: ${{ secrets.SUPERPOOL_ENABLE_TEST_MODE }}
          SUPERPOOL_ENABLE_SMTP_EMAIL: ${{ secrets.SUPERPOOL_ENABLE_SMTP_EMAIL }}
          SUPERPOOL_NOTIFICATION_SERVICE_FROM_EMAIL: ${{ secrets.SUPERPOOL_NOTIFICATION_SERVICE_FROM_EMAIL }}
          SUPERPOOL_TEST_MODE_ENABLED: ${{ secrets.SUPERPOOL_TEST_MODE_ENABLED }}
          SUPERPOOL_LOG_FILE_NAME: ${{ secrets.SUPERPOOL_LOG_FILE_NAME }}

          # Email related keys
          EMAIL_BACKEND: ${{ secrets.EMAIL_BACKEND }}
          EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
          EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
          EMAIL_USE_TLS: ${{ secrets.EMAIL_USE_TLS }}
          EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          DEFAULT_FROM_EMAIL: ${{ secrets.DEFAULT_FROM_EMAIL }}
          GOOGLE_SMTP_SERVER: ${{ secrets.GOOGLE_SMTP_SERVER }}
          GOOGLE_EMAIL_USER: ${{ secrets.GOOGLE_EMAIL_USER }}
          GOOGLE_EMAIL_PASSWORD: ${{ secrets.GOOGLE_EMAIL_PASSWORD }}


          # GCP related keys
          USE_GOOGLE_STORAGE: ${{ secrets.USE_GOOGLE_STORAGE }}
          GOOGLE_CLOUD_STORAGE_BUCKET_NAME: ${{ secrets.GOOGLE_CLOUD_STORAGE_BUCKET_NAME }}
          GS_BUCKET_NAME: ${{ secrets.GS_BUCKET_NAME }}
          GOOGLE_CLOUD_STORAGE_CREDENTIALS: ${{ secrets.GOOGLE_CLOUD_STORAGE_CREDENTIALS }}
          GOOGLE_CLOUD_STORAGE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_CLOUD_STORAGE_SERVICE_ACCOUNT }}
          GOOGLE_CLOUD_STORAGE_OPTIONS: ${{ secrets.GOOGLE_CLOUD_STORAGE_OPTIONS }}
          GOOGLE_CLOUD_STORAGE_PROJECT_ID: ${{ secrets.GOOGLE_CLOUD_STORAGE_PROJECT_ID }}

          # Database related keys
          DATABASE_USER: postgres #${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD: postgres #${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME: postgres #${{ secrets.DATABASE_NAME }}
          INSTANCE_UNIX_SOCKET: ${{ secrets.INSTANCE_UNIX_SOCKET }}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DATABASE_HOST: localhost #${{ secrets.DATABASE_HOST }}

          # Redis and related envs
          REDIS_ENABLED: ${{ secrets.REDIS_ENABLED }}
          REDIS_URL: ${{ secrets.REDIS_URL }}

          # Others
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DJANGO_DEBUG: ${{ secrets.DJANGO_DEBUG }}
          LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
          DISABLE_AUTH: ${{ secrets.DISABLE_AUTH }}
          HEIRS_API_KEY: ${{ secrets.HEIRS_API_KEY }}
          HEIRS_APP_ID: ${{ secrets.HEIRS_APP_ID }}
          SUPERPOOL_TEST_PROD_DB_URL: ${{secrets.SUPERPOOL_TEST_PROD_DB_URL}}
        run: |
          cd superpool/api
          poetry run pytest .

      - name: Generate coverage report
        run: |
          cd superpool/api
          poetry add pytest-cov
          poetry run pytest --cov=./ --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: ./coverage/reports/
          fail_ci_if_error: false # notthing to see here, just testing something
          flags: unittests
          name: codecov-superpoool-v3
          token: ${{ env.CODECOV_TOKEN }}
          verbose: true